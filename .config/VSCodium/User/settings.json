{
	////////////////////
	// Editor options
	////////////////////

	"explorer.compactFolders": false, // Disable compact folders
	"editor.autoIndent": "advanced", // Honor language-specific indention rules
	"editor.bracketPairColorization.enabled": true, // Colorize bracket pairings
	"editor.detectIndentation": true, // Automatically detect indentation
	"editor.codeActionsOnSave": {
		"source.action.useSortedKeys.biome": "explicit", // Sort biome imports
		"source.addMissingImports.ts": "explicit", // Add missing import extensions
		"source.biome": "explicit", // Run biome
		"source.fixAll.ts": "explicit", // Fix all on explicit save
		"source.organizeImports.biome": "explicit", // Organize biome imports
		"source.removeUnusedImports": "explicit" // Remove unused imports
	},
	"editor.fontFamily": "Fira Code", // https://github.com/tonsky/FiraCode
	"editor.fontLigatures": true, // Enables all font ligatures
	"editor.fontWeight": 550, // Use a slightly bolder font for my crappy eyes
	"editor.guides.bracketPairs": true, // Enable bracket pairing
	"editor.guides.bracketPairsHorizontal": "active", // Show horizontal bracket pairing guides
	"editor.guides.highlightActiveIndentation": true, // Show active indent guide
	"editor.snippetSuggestions": "bottom", // Puts suggestions at the bottom
	"editor.suggestSelection": "first", // Always select the first suggestion
	"editor.tabCompletion": "on", // Insert suggestions with tab
	"editor.insertSpaces": false, // Use tabs by default
	"editor.wordWrap": "on", // Enables word wrapping
	"editor.tabSize": 2, // Sets the default tab size to 2
	"files.autoSave": "afterDelay", // Enable auto-saving after a delay
	"files.exclude": {
		"**/*.tsbuildinfo": true,
		"**/.cache": true,
		"**/.DS_Store": true,
		"**/.git": true,
		"**/.hg": true,
		"**/.svn": true,
		"**/.turbo": true,
		"**/_site": true,
		"**/dist": true,
		"**/node_modules": true,
		"**/Thumbs.db": true
	},
	"files.autoSaveDelay": 5000, // Auto save after 5 seconds of inactivity
	"terminal.integrated.fontFamily": "Fira Code", // https://github.com/tonsky/FiraCode
	"update.showReleaseNotes": false, // miguelsolorio.min-theme
	"workbench.colorTheme": "Default Dark Modern", // Use inbuilt default dark
	"window.titleBarStyle": "native", // Use native titlebar
	"workbench.iconTheme": "material-icon-theme", // PKief.material-icon-theme
	"workbench.productIconTheme": "material-product-icons", // PKief.material-product-icons
	"workbench.startupEditor": "none", // Don't open anything upon startup

	////////////////////
	// Formatting options
	////////////////////

	"biome.enabled": true, // Enable Biome globally
	"biome.experimental.rename": true, // Enable biome renaming support
	"biome.requireConfigFile": true, // Require a config for using biome
	"biome.lsp.bin": "~/.bun/bin/biome", // Use globally installed Biome
	"eslint.enable": true, // Enable ESLint globally
	"editor.defaultFormatter": "esbenp.prettier-vscode", // Uses Prettier as the default formatter
	"editor.formatOnSave": true, // Format files automatically upon saving
	"files.eol": "\n", // Use unix-style line endings
	"files.insertFinalNewline": true, // Always insert a blank final line
	"files.trimTrailingWhitespace": true, // Trim trailing whitespace from files

	// HTML formatting
	"html.format.enable": true, // Enables the HTML formatter
	"html.format.extraLiners": "head, body, /html", // Put extra lines in the head, body, and html tags
	"html.format.indentInnerHtml": true, // Wrap inner HTML elements
	"html.format.maxPreserveNewLines": 1, // Only preserve 1 line of HTML in formatting
	"html.format.templating": true, // Enable formatting templating engines
	"html.format.wrapAttributes": "force-aligned", // Forcefully wrap and vertically align all attributes
	"html.format.wrapLineLength": 80, // Wrap HTML lines to 80

	// Java formatting
	"java.format.enabled": true, // Enables the Java formatter

	// Liquid formatting
	"liquid.format.validate": true, // Always validate Liquid markup
	"liquid.format.rules": {
		"endNewline": true, // Always append an empty newline
		"indentSize": 2, // Use an indentation size of 2
		"preserveLine": 1, // Only preserve one line of whitespace
		"liquid": {
			"commentIndent": true, // Don't indent Liquid block comments
			"indentAttribute": true, // Indent HTML attributes
			"lineBreakSeparator": "before", // Add linebreak seperaters before
			"normalizeSpacing": true, // Normalize and correct Liquid tag spacing
			"quoteConvert": "double" // Always use double quotes
		},
		"markup": {
			"attributeCasing": "preserve", // Preserve attribute casing
			"attributeSort": true, // Enable sorting attributes
			"commentDelimiters": "consistent", // Consistently apply comment delimiters
			"commentIndent": true, // Apply indentation to HTML comments
			"commentNewline": true, // Put HTML comments on newlines
			"forceAttribute": true, // Force attribute breakups if > 1 are provided
			"ignoreCSS": true, // Do not format CSS
			"ignoreJS": true, // Do not format JS
			"ignoreJSON": true, // Do not format JSON
			"quoteConvert": "double", // Always use double quotes
			"selfCloseSpace": true, // Always append closing space in tags
			"selfCloseSVG": true // Always append closing space in SVG tags
		}
	},

	// Prettier formatting
	"prettier.arrowParens": "always", // Always require arrows in parens
	"prettier.bracketSameLine": true, // Put brackets on the same line
	"prettier.bracketSpacing": true, // Put spacing between brackets
	"prettier.embeddedLanguageFormatting": "auto", // Attempt to format embedded languages
	"prettier.endOfLine": "lf", // Use LF by default
	"prettier.enable": true, // Enable prettier by default
	"prettier.experimentalTernaries": true, // Use the new ternary formatting
	"prettier.htmlWhitespaceSensitivity": "css", // Respect the default value of CSS display property
	"prettier.proseWrap": "preserve", // Preserve prose wrapping if needed
	"prettier.quoteProps": "consistent", // If at least one property in an object requires quotes, quote all properties
	"prettier.trailingComma": "all", // Always append trailing commas
	"prettier.printWidth": 80, // Max line length of 80
	"prettier.tabWidth": 2, // Tab width of 2
	"prettier.semi": true, // Always require semicolons
	"prettier.singleQuote": false, // Do not use singlequotes
	"prettier.useEditorConfig": true, // Use editorconfig options
	"prettier.useTabs": true, // Use tabs by default
	"prettier.vueIndentScriptAndStyle": true, // Format code and scripts inside of Vue tags

	// LaTeX formatting
	"latex-workshop.formatting.latex": "tex-fmt", // Use tex-fmt for formatting
	"latex-workshop.formatting.tex-fmt.args": [
		"--nowrap", // do not wrap lines
		"--usetabs", // format with tabs
		"--tabsize=1" // format with a tab size of 2
	],

	// Shell formatting
	"shellformat.useEditorConfig": true, // Use editorconfig for formatting shell files

	// SASS formatting
	"sass.format.enabled": true, // Enable Sass formatting

	////////////////////
	// Extension options
	////////////////////

	"go.toolsManagement.autoUpdate": true, // Automatically update Go tools
	"latex-utilities.message.update.show": false, // Disables the annoying LaTeX prompt
	"redhat.telemetry.enabled": false, // Opts-out of Red Hat spyware
	"svelte.enable-ts-plugin": true, // Enables TypeScript support for Svelte
	"telemetry.telemetryLevel": "off", // Opts-out of Red Hat spyware
	"vscord.app.name": "VSCodium", // Sets Discord RPC name

	////////////////////
	// Language options
	////////////////////

	// CSS language options
	"[css][scss]": {
		"editor.defaultFormatter": "biomejs.biome" // Use Biome for formatting CSS/SCSS
	},

	// HTML language options
	"html.suggest.html5": true, // Suggest HTML5 tags
	"[html]": {
		"editor.defaultFormatter": "vscode.html-language-features" // Use VSCode's HTML formatter
	},

	// LaTeX language options
	"[latex]": {
		"editor.defaultFormatter": "James-Yu.latex-workshop" // Use LaTeX workshop formatter
	},

	// Liquid language options
	"[liquid]": {
		"editor.insertSpaces": true, // Liquid likes spaces for some reason
		"editor.defaultFormatter": "sissel.shopify-liquid" // Use shopify-liquid as the formatter
	},

	// JavaScript language options
	"javascript.updateImportsOnFileMove.enabled": "always", // Update imports when files are moved or renamed
	"[javascript][javascriptreact]": {
		"editor.defaultFormatter": "biomejs.biome", // Use Biome to format
		"javascript.preferences.importModuleSpecifierEnding": "js" // Always append .js to imports
	},

	// JSON language options
	"[json][jsonc]": {
		"editor.defaultFormatter": "biomejs.biome" // Use Biome to format
	},

	// Java language options
	"java.project.referencedLibraries": [
		"lib/**/*.jar", // Search system lib/ for jar files
		"/usr/share/java/**/*.jar" // Search usr/share/java for jar files
	],
	"[java]": {
		"editor.defaultFormatter": "redhat.java", // Use RedHat's Java formatter
		"editor.indentSize": 3 // Tab size of 3 following Checkstyle
	},

	// Markdown language options
	"[markdown]": {
		"editor.defaultFormatter": "esbenp.prettier-vscode" // Use prettier for formatting Markdown
	},

	// Python language options
	"[python]": {
		"editor.defaultFormatter": "ms-python.black-formatter", // Use black for formatting
		"editor.tabSize": 4, // Tab size of 4 following PEP-8
		"editor.insertSpaces": true // Use spaces for Python following PEP-8
	},

	// SASS language options
	"[sass]": {
		"editor.insertSpaces": true, // SASS needs spaces
		"editor.defaultFormatter": "syler.sass-indented" // Use sass-intented for formatting SASS
	},

	// Shell language options
	"[shellscript][dotenv][ignore][properties]": {
		"editor.defaultFormatter": "foxundermoon.shell-format" // Use shell-format for formatting shell files
	},

	// TypeScript language options
	"typescript.updateImportsOnFileMove.enabled": "always", // Update imports when files are moved or renamed
	"[typescript][typescriptreact]": {
		"editor.defaultFormatter": "biomejs.biome", // Use biome to format
		"javascript.preferences.importModuleSpecifierEnding": "js", // Always end imports with .js
		"typescript.preferences.importModuleSpecifier": "relative" // Use the relative import path always
	},

	// TOML language options
	"[toml]": {
		"editor.defaultFormatter": "tamasfe.even-better-toml" // Use prettier for formatting TOML files
	},

	// YAML language options
	"[yaml]": {
		"editor.defaultFormatter": "esbenp.prettier-vscode", // Use prettier for formatting YAML files
		"editor.insertSpaces": true, // Use spaces for YAML as required
		"editor.tabSize": 2 // Use 2 spaces for YAML as required
	},

	// XML language options
	"[xml]": {
		"editor.defaultFormatter": "redhat.vscode-xml" // Use RedHat XML for formatting
	},

	//
	// Operator italics
	//

	"editor.tokenColorCustomizations": {
		"[*]": {
			"textMateRules": [
				{
					"scope": [
						"markup.changed",
						"meta.diff.header.git",
						"meta.diff.header.from-file",
						"meta.diff.header.to-file",
						"markup.deleted.diff",
						"markup.inserted.diff",
						"comment",
						"punctuation.accessor",
						"keyword",
						"storage",
						"meta.var.expr",
						"meta.class meta.method.declaration meta.var.expr storage.type.js",
						"storage.type.property.js",
						"storage.type.property.ts",
						"storage.type.property.tsx",
						"entity.name.function",
						"entity.other.attribute-name",
						"keyword.operator.relational",
						"meta.delimiter.period",
						"meta.selector",
						"entity.name.tag.doctype",
						"meta.tag.sgml.doctype",
						"variable.other.object.property",
						"entity.name.function",
						"keyword.operator.comparison",
						"keyword.control.flow.js",
						"keyword.control.flow.ts",
						"keyword.control.flow.tsx",
						"keyword.control.ruby",
						"keyword.control.module.ruby",
						"keyword.control.class.ruby",
						"keyword.control.def.ruby",
						"keyword.control.loop.js",
						"keyword.control.loop.ts",
						"keyword.control.import.js",
						"keyword.control.import.ts",
						"keyword.control.import.tsx",
						"keyword.control.from.js",
						"keyword.control.from.ts",
						"keyword.control.from.tsx",
						"keyword.operator.instanceof.js",
						"keyword.operator.expression.instanceof.ts",
						"keyword.operator.expression.instanceof.tsx",
						"italic",
						"quote",
						"source.elixir .punctuation.binary.elixir",
						"source.go keyword.package.go",
						"source.go keyword.import.go",
						"source.go keyword.function.go",
						"source.go keyword.type.go",
						"source.go keyword.struct.go",
						"source.go keyword.interface.go",
						"source.go keyword.const.go",
						"source.go keyword.var.go",
						"source.go keyword.map.go",
						"source.go keyword.channel.go",
						"source.go keyword.control.go",
						"meta.tag.sgml.doctype.html",
						"variable.other.object.js",
						"markup.italic.markdown",
						"markup.quote.markdown",
						"keyword.control"
					],
					"settings": {
						"fontStyle": "italic"
					}
				},
				{
					"scope": [
						"constant.numeric",
						"constant.character.numeric",
						"storage.type.function.arrow.js",
						"entity.name.tag",
						"meta.tag.other.html",
						"meta.tag.other.js",
						"meta.tag.other.tsx",
						"entity.name.tag.tsx",
						"entity.name.tag.js",
						"entity.name.tag",
						"meta.tag.js",
						"meta.tag.tsx",
						"meta.tag.html",
						"keyword.operator",
						"variable.parameter.function",
						"support.type.vendor.property-name",
						"support.constant.vendor.property-value",
						"support.type.property-name",
						"meta.property-list entity.name.tag",
						"keyword.operator.logical",
						"variable.other.object.js",
						"keyword.control.conditional.js",
						"keyword.control.conditional.ts",
						"keyword.control.switch.js",
						"keyword.control.switch.ts",
						"entity.name.tag.css",
						"entity.name.tag.less",
						"entity.name.tag.custom.css",
						"support.constant.property-value.css",
						"entity.name.type.js",
						"entity.name.type.module.js",
						"support.class.component.js",
						"support.class.component.tsx",
						"meta.property-list.css meta.property-value.css variable.other.less",
						"meta.property-list.scss variable.scss",
						"meta.property-list.sass variable.sass",
						"meta.brace",
						"keyword.operator.operator",
						"keyword.operator.or.regexp",
						"keyword.operator.expression.in",
						"keyword.operator.relational",
						"keyword.operator.assignment",
						"keyword.operator.comparison",
						"keyword.operator.type",
						"keyword.operator",
						"keyword",
						"punctuation.definintion.string",
						"punctuation",
						"variable.other.readwrite.js",
						"storage.type",
						"source.css",
						"string.quoted"
					],
					"settings": {
						"fontStyle": ""
					}
				}
			]
		}
	}
}
